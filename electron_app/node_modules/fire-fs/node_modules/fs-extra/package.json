{
  "_args": [
    [
      {
        "raw": "fs-extra@github:fireball-x/node-fs-extra",
        "scope": null,
        "escapedName": "fs-extra",
        "name": "fs-extra",
        "rawSpec": "github:fireball-x/node-fs-extra",
        "spec": "github:fireball-x/node-fs-extra",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:fireball-x/node-fs-extra.git",
          "sshUrl": "git+ssh://git@github.com/fireball-x/node-fs-extra.git",
          "httpsUrl": "git+https://github.com/fireball-x/node-fs-extra.git",
          "gitUrl": "git://github.com/fireball-x/node-fs-extra.git",
          "shortcut": "github:fireball-x/node-fs-extra",
          "directUrl": "https://raw.githubusercontent.com/fireball-x/node-fs-extra/master/package.json"
        }
      },
      "C:\\Users\\sylvmara\\antares-data-organizer\\electron_app\\node_modules\\fire-fs"
    ]
  ],
  "_from": "fireball-x/node-fs-extra",
  "_id": "fs-extra@0.30.0",
  "_inCache": true,
  "_location": "/fire-fs/fs-extra",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fs-extra@github:fireball-x/node-fs-extra",
    "scope": null,
    "escapedName": "fs-extra",
    "name": "fs-extra",
    "rawSpec": "github:fireball-x/node-fs-extra",
    "spec": "github:fireball-x/node-fs-extra",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:fireball-x/node-fs-extra.git",
      "sshUrl": "git+ssh://git@github.com/fireball-x/node-fs-extra.git",
      "httpsUrl": "git+https://github.com/fireball-x/node-fs-extra.git",
      "gitUrl": "git://github.com/fireball-x/node-fs-extra.git",
      "shortcut": "github:fireball-x/node-fs-extra",
      "directUrl": "https://raw.githubusercontent.com/fireball-x/node-fs-extra/master/package.json"
    }
  },
  "_requiredBy": [
    "/fire-fs"
  ],
  "_resolved": "git://github.com/fireball-x/node-fs-extra.git#8f31e105f436dc0b3a86df9e720c348cfb519aee",
  "_shasum": "df51757b930ab81cdf7a582581859deeca4ea3fc",
  "_shrinkwrap": null,
  "_spec": "fs-extra@github:fireball-x/node-fs-extra",
  "_where": "C:\\Users\\sylvmara\\antares-data-organizer\\electron_app\\node_modules\\fire-fs",
  "author": {
    "name": "JP Richardson",
    "email": "jprichardson@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/jprichardson/node-fs-extra/issues"
  },
  "dependencies": {
    "graceful-fs": "^4.1.2",
    "jsonfile": "^2.1.0",
    "klaw": "^1.0.0",
    "path-is-absolute": "^1.0.0",
    "rimraf": "^2.2.8"
  },
  "description": "fs-extra contains methods that aren't included in the vanilla Node.js fs package. Such as mkdir -p, cp -r, and rm -rf.",
  "devDependencies": {
    "coveralls": "^2.11.2",
    "istanbul": "^0.3.5",
    "minimist": "^1.1.1",
    "mocha": "^2.1.0",
    "read-dir-files": "^0.1.1",
    "secure-random": "^1.1.1",
    "semver": "^4.3.6",
    "standard": "^7.0.0-beta.0"
  },
  "gitHead": "8f31e105f436dc0b3a86df9e720c348cfb519aee",
  "homepage": "https://github.com/jprichardson/node-fs-extra",
  "keywords": [
    "fs",
    "file",
    "file system",
    "copy",
    "directory",
    "extra",
    "mkdirp",
    "mkdir",
    "mkdirs",
    "recursive",
    "json",
    "read",
    "write",
    "extra",
    "delete",
    "remove",
    "touch",
    "create",
    "text",
    "output",
    "move"
  ],
  "license": "MIT",
  "main": "./lib/index",
  "name": "fs-extra",
  "optionalDependencies": {},
  "readme": "Node.js: fs-extra\r\n=================\r\n\r\n`fs-extra` adds file system methods that aren't included in the native `fs` module. It is a drop in replacement for `fs`.\r\n\r\n[![npm Package](https://img.shields.io/npm/v/fs-extra.svg?style=flat-square)](https://www.npmjs.org/package/fs-extra)\r\n[![build status](https://api.travis-ci.org/jprichardson/node-fs-extra.svg)](http://travis-ci.org/jprichardson/node-fs-extra)\r\n[![windows Build status](https://img.shields.io/appveyor/ci/jprichardson/node-fs-extra/master.svg?label=windows%20build)](https://ci.appveyor.com/project/jprichardson/node-fs-extra/branch/master)\r\n[![downloads per month](http://img.shields.io/npm/dm/fs-extra.svg)](https://www.npmjs.org/package/fs-extra)\r\n[![Coverage Status](https://img.shields.io/coveralls/jprichardson/node-fs-extra.svg)](https://coveralls.io/r/jprichardson/node-fs-extra)\r\n\r\n<a href=\"https://github.com/feross/standard\"><img src=\"https://cdn.rawgit.com/feross/standard/master/sticker.svg\" alt=\"Standard JavaScript\" width=\"100\"></a>\r\n\r\n**NOTE (2016-04-28):** Node v0.10 will be unsupported 2016-10-01. Node v0.12 will be unsupported on 2017-04-01.\r\n\r\n\r\nWhy?\r\n----\r\n\r\nI got tired of including `mkdirp`, `rimraf`, and `ncp` in most of my projects.\r\n\r\n\r\n\r\n\r\nInstallation\r\n------------\r\n\r\n    npm install --save fs-extra\r\n\r\n\r\n\r\nUsage\r\n-----\r\n\r\n`fs-extra` is a drop in replacement for native `fs`. All methods in `fs` are unmodified and attached to `fs-extra`.\r\n\r\nYou don't ever need to include the original `fs` module again:\r\n\r\n```js\r\nvar fs = require('fs') // this is no longer necessary\r\n```\r\n\r\nyou can now do this:\r\n\r\n```js\r\nvar fs = require('fs-extra')\r\n```\r\n\r\nor if you prefer to make it clear that you're using `fs-extra` and not `fs`, you may want\r\nto name your `fs` variable `fse` like so:\r\n\r\n```js\r\nvar fse = require('fs-extra')\r\n```\r\n\r\nyou can also keep both, but it's redundant:\r\n\r\n```js\r\nvar fs = require('fs')\r\nvar fse = require('fs-extra')\r\n```\r\n\r\nSync vs Async\r\n-------------\r\nMost methods are async by default (they take a callback with an `Error` as first argument).\r\n\r\nSync methods on the other hand will throw if an error occurs.\r\n\r\nExample:\r\n\r\n```js\r\nvar fs = require('fs-extra')\r\n\r\nfs.copy('/tmp/myfile', '/tmp/mynewfile', function (err) {\r\n  if (err) return console.error(err)\r\n  console.log(\"success!\")\r\n});\r\n\r\ntry {\r\n  fs.copySync('/tmp/myfile', '/tmp/mynewfile')\r\n  console.log(\"success!\")\r\n} catch (err) {\r\n  console.error(err)\r\n}\r\n```\r\n\r\n\r\nMethods\r\n-------\r\n- [copy](#copy)\r\n- [copySync](#copy)\r\n- [emptyDir](#emptydirdir-callback)\r\n- [emptyDirSync](#emptydirdir-callback)\r\n- [ensureFile](#ensurefilefile-callback)\r\n- [ensureFileSync](#ensurefilefile-callback)\r\n- [ensureDir](#ensuredirdir-callback)\r\n- [ensureDirSync](#ensuredirdir-callback)\r\n- [ensureLink](#ensurelinksrcpath-dstpath-callback)\r\n- [ensureLinkSync](#ensurelinksrcpath-dstpath-callback)\r\n- [ensureSymlink](#ensuresymlinksrcpath-dstpath-type-callback)\r\n- [ensureSymlinkSync](#ensuresymlinksrcpath-dstpath-type-callback)\r\n- [mkdirs](#mkdirsdir-callback)\r\n- [mkdirsSync](#mkdirsdir-callback)\r\n- [move](#movesrc-dest-options-callback)\r\n- [outputFile](#outputfilefile-data-options-callback)\r\n- [outputFileSync](#outputfilefile-data-options-callback)\r\n- [outputJson](#outputjsonfile-data-options-callback)\r\n- [outputJsonSync](#outputjsonfile-data-options-callback)\r\n- [readJson](#readjsonfile-options-callback)\r\n- [readJsonSync](#readjsonfile-options-callback)\r\n- [remove](#removedir-callback)\r\n- [removeSync](#removedir-callback)\r\n- [walk](#walk)\r\n- [writeJson](#writejsonfile-object-options-callback)\r\n- [writeJsonSync](#writejsonfile-object-options-callback)\r\n\r\n\r\n**NOTE:** You can still use the native Node.js methods. They are copied over to `fs-extra`.\r\n\r\n\r\n### copy()\r\n\r\n**copy(src, dest, [options], callback)**\r\n\r\n\r\nCopy a file or directory. The directory can have contents. Like `cp -r`.\r\n\r\nOptions:\r\n- clobber (boolean): overwrite existing file or directory\r\n- dereference (boolean): dereference symlinks\r\n- preserveTimestamps (boolean): will set last modification and access times to the ones of the original source files, default is `false`.\r\n- filter: Function or RegExp to filter copied files. If function, return true to include, false to exclude. If RegExp, same as function, where `filter` is `filter.test`.\r\n\r\nSync: `copySync()`\r\n\r\nExample:\r\n\r\n```js\r\nvar fs = require('fs-extra')\r\n\r\nfs.copy('/tmp/myfile', '/tmp/mynewfile', function (err) {\r\n  if (err) return console.error(err)\r\n  console.log(\"success!\")\r\n}) // copies file\r\n\r\nfs.copy('/tmp/mydir', '/tmp/mynewdir', function (err) {\r\n  if (err) return console.error(err)\r\n  console.log('success!')\r\n}) // copies directory, even if it has subdirectories or files\r\n```\r\n\r\n\r\n### emptyDir(dir, [callback])\r\n\r\nEnsures that a directory is empty. Deletes directory contents if the directory is not empty. If the directory does not exist, it is created. The directory itself is not deleted.\r\n\r\nAlias: `emptydir()`\r\n\r\nSync: `emptyDirSync()`, `emptydirSync()`\r\n\r\nExample:\r\n\r\n```js\r\nvar fs = require('fs-extra')\r\n\r\n// assume this directory has a lot of files and folders\r\nfs.emptyDir('/tmp/some/dir', function (err) {\r\n  if (!err) console.log('success!')\r\n})\r\n```\r\n\r\n\r\n### ensureFile(file, callback)\r\n\r\nEnsures that the file exists. If the file that is requested to be created is in directories that do not exist, these directories are created. If the file already exists, it is **NOT MODIFIED**.\r\n\r\nAlias: `createFile()`\r\n\r\nSync: `createFileSync()`,`ensureFileSync()`\r\n\r\n\r\nExample:\r\n\r\n```js\r\nvar fs = require('fs-extra')\r\n\r\nvar file = '/tmp/this/path/does/not/exist/file.txt'\r\nfs.ensureFile(file, function (err) {\r\n  console.log(err) // => null\r\n  // file has now been created, including the directory it is to be placed in\r\n})\r\n```\r\n\r\n\r\n### ensureDir(dir, callback)\r\n\r\nEnsures that the directory exists. If the directory structure does not exist, it is created.\r\n\r\nSync: `ensureDirSync()`\r\n\r\n\r\nExample:\r\n\r\n```js\r\nvar fs = require('fs-extra')\r\n\r\nvar dir = '/tmp/this/path/does/not/exist'\r\nfs.ensureDir(dir, function (err) {\r\n  console.log(err) // => null\r\n  // dir has now been created, including the directory it is to be placed in\r\n})\r\n```\r\n\r\n\r\n### ensureLink(srcpath, dstpath, callback)\r\n\r\nEnsures that the link exists. If the directory structure does not exist, it is created.\r\n\r\nSync: `ensureLinkSync()`\r\n\r\n\r\nExample:\r\n\r\n```js\r\nvar fs = require('fs-extra')\r\n\r\nvar srcpath = '/tmp/file.txt'\r\nvar dstpath = '/tmp/this/path/does/not/exist/file.txt'\r\nfs.ensureLink(srcpath, dstpath, function (err) {\r\n  console.log(err) // => null\r\n  // link has now been created, including the directory it is to be placed in\r\n})\r\n```\r\n\r\n\r\n### ensureSymlink(srcpath, dstpath, [type], callback)\r\n\r\nEnsures that the symlink exists. If the directory structure does not exist, it is created.\r\n\r\nSync: `ensureSymlinkSync()`\r\n\r\n\r\nExample:\r\n\r\n```js\r\nvar fs = require('fs-extra')\r\n\r\nvar srcpath = '/tmp/file.txt'\r\nvar dstpath = '/tmp/this/path/does/not/exist/file.txt'\r\nfs.ensureSymlink(srcpath, dstpath, function (err) {\r\n  console.log(err) // => null\r\n  // symlink has now been created, including the directory it is to be placed in\r\n})\r\n```\r\n\r\n\r\n### mkdirs(dir, callback)\r\n\r\nCreates a directory. If the parent hierarchy doesn't exist, it's created. Like `mkdir -p`.\r\n\r\nAlias: `mkdirp()`\r\n\r\nSync: `mkdirsSync()` / `mkdirpSync()`\r\n\r\n\r\nExamples:\r\n\r\n```js\r\nvar fs = require('fs-extra')\r\n\r\nfs.mkdirs('/tmp/some/long/path/that/prob/doesnt/exist', function (err) {\r\n  if (err) return console.error(err)\r\n  console.log(\"success!\")\r\n})\r\n\r\nfs.mkdirsSync('/tmp/another/path')\r\n```\r\n\r\n\r\n### move(src, dest, [options], callback)\r\n\r\nMoves a file or directory, even across devices.\r\n\r\nOptions:\r\n- clobber (boolean): overwrite existing file or directory\r\n- limit (number): number of concurrent moves, see ncp for more information\r\n\r\nExample:\r\n\r\n```js\r\nvar fs = require('fs-extra')\r\n\r\nfs.move('/tmp/somefile', '/tmp/does/not/exist/yet/somefile', function (err) {\r\n  if (err) return console.error(err)\r\n  console.log(\"success!\")\r\n})\r\n```\r\n\r\n\r\n### outputFile(file, data, [options], callback)\r\n\r\nAlmost the same as `writeFile` (i.e. it [overwrites](http://pages.citebite.com/v2o5n8l2f5reb)), except that if the parent directory does not exist, it's created. `options` are what you'd pass to [`fs.writeFile()`](https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback).\r\n\r\nSync: `outputFileSync()`\r\n\r\n\r\nExample:\r\n\r\n```js\r\nvar fs = require('fs-extra')\r\nvar file = '/tmp/this/path/does/not/exist/file.txt'\r\n\r\nfs.outputFile(file, 'hello!', function (err) {\r\n  console.log(err) // => null\r\n\r\n  fs.readFile(file, 'utf8', function (err, data) {\r\n    console.log(data) // => hello!\r\n  })\r\n})\r\n```\r\n\r\n\r\n\r\n### outputJson(file, data, [options], callback)\r\n\r\nAlmost the same as `writeJson`, except that if the directory does not exist, it's created.\r\n`options` are what you'd pass to [`jsonFile.writeFile()`](https://github.com/jprichardson/node-jsonfile#writefilefilename-options-callback).\r\n\r\nAlias: `outputJSON()`\r\n\r\nSync: `outputJsonSync()`, `outputJSONSync()`\r\n\r\n\r\nExample:\r\n\r\n```js\r\nvar fs = require('fs-extra')\r\nvar file = '/tmp/this/path/does/not/exist/file.txt'\r\n\r\nfs.outputJson(file, {name: 'JP'}, function (err) {\r\n  console.log(err) // => null\r\n\r\n  fs.readJson(file, function(err, data) {\r\n    console.log(data.name) // => JP\r\n  })\r\n})\r\n```\r\n\r\n\r\n\r\n### readJson(file, [options], callback)\r\n\r\nReads a JSON file and then parses it into an object. `options` are the same\r\nthat you'd pass to [`jsonFile.readFile`](https://github.com/jprichardson/node-jsonfile#readfilefilename-options-callback).\r\n\r\nAlias: `readJSON()`\r\n\r\nSync: `readJsonSync()`, `readJSONSync()`\r\n\r\n\r\nExample:\r\n\r\n```js\r\nvar fs = require('fs-extra')\r\n\r\nfs.readJson('./package.json', function (err, packageObj) {\r\n  console.log(packageObj.version) // => 0.1.3\r\n})\r\n```\r\n\r\n`readJsonSync()` can take a `throws` option set to `false` and it won't throw if the JSON is invalid. Example:\r\n\r\n```js\r\nvar fs = require('fs-extra')\r\nvar file = path.join('/tmp/some-invalid.json')\r\nvar data = '{not valid JSON'\r\nfs.writeFileSync(file, data)\r\n\r\nvar obj = fs.readJsonSync(file, {throws: false})\r\nconsole.log(obj) // => null\r\n```\r\n\r\n\r\n### remove(dir, callback)\r\n\r\nRemoves a file or directory. The directory can have contents. Like `rm -rf`.\r\n\r\nSync: `removeSync()`\r\n\r\n\r\nExamples:\r\n\r\n```js\r\nvar fs = require('fs-extra')\r\n\r\nfs.remove('/tmp/myfile', function (err) {\r\n  if (err) return console.error(err)\r\n\r\n  console.log('success!')\r\n})\r\n\r\nfs.removeSync('/home/jprichardson') //I just deleted my entire HOME directory.\r\n```\r\n\r\n### walk()\r\n\r\n**walk(dir, [streamOptions])**\r\n\r\nThe function `walk()` from the module [`klaw`](https://github.com/jprichardson/node-klaw).\r\n\r\nReturns a [Readable stream](https://nodejs.org/api/stream.html#stream_class_stream_readable) that iterates\r\nthrough every file and directory starting with `dir` as the root. Every `read()` or `data` event\r\nreturns an object with two properties: `path` and `stats`. `path` is the full path of the file and\r\n`stats` is an instance of [fs.Stats](https://nodejs.org/api/fs.html#fs_class_fs_stats).\r\n\r\nStreams 1 (push) example:\r\n\r\n```js\r\nvar items = [] // files, directories, symlinks, etc\r\nfse.walk(TEST_DIR)\r\n  .on('data', function (item) {\r\n    items.push(item.path)\r\n  })\r\n  .on('end', function () {\r\n    console.dir(items) // => [ ... array of files]\r\n  })\r\n```\r\n\r\nStreams 2 & 3 (pull) example:\r\n\r\n```js\r\nvar items = [] // files, directories, symlinks, etc\r\nfse.walk(TEST_DIR)\r\n  .on('readable', function () {\r\n    var item\r\n    while ((item = this.read())) {\r\n      items.push(item.path)\r\n    }\r\n  })\r\n  .on('end', function () {\r\n    console.dir(items) // => [ ... array of files]\r\n  })\r\n```\r\n\r\nIf you're not sure of the differences on Node.js streams 1, 2, 3 then I'd\r\nrecommend this resource as a good starting point: https://strongloop.com/strongblog/whats-new-io-js-beta-streams3/.\r\n\r\n**See [`klaw` documentation](https://github.com/jprichardson/node-klaw) for more detailed usage.**\r\n\r\n\r\n### writeJson(file, object, [options], callback)\r\n\r\nWrites an object to a JSON file. `options` are the same that\r\nyou'd pass to [`jsonFile.writeFile()`](https://github.com/jprichardson/node-jsonfile#writefilefilename-options-callback).\r\n\r\nAlias: `writeJSON()`\r\n\r\nSync: `writeJsonSync()`, `writeJSONSync()`\r\n\r\nExample:\r\n\r\n```js\r\nvar fs = require('fs-extra')\r\nfs.writeJson('./package.json', {name: 'fs-extra'}, function (err) {\r\n  console.log(err)\r\n})\r\n```\r\n\r\n\r\nThird Party\r\n-----------\r\n\r\n### Promises\r\n\r\nUse [Bluebird](https://github.com/petkaantonov/bluebird). See https://github.com/petkaantonov/bluebird/blob/master/API.md#promisification. `fs-extra` is\r\nexplicitly listed as supported.\r\n\r\n```js\r\nvar Promise = require('bluebird')\r\nvar fs = Promise.promisifyAll(require('fs-extra'))\r\n```\r\n\r\nOr you can use the package [`fs-extra-promise`](https://github.com/overlookmotel/fs-extra-promise) that marries the two together.\r\n\r\n\r\n### TypeScript\r\n\r\nIf you like TypeScript, you can use `fs-extra` with it: https://github.com/borisyankov/DefinitelyTyped/tree/master/fs-extra\r\n\r\n\r\n### File / Directory Watching\r\n\r\nIf you want to watch for changes to files or directories, then you should use [chokidar](https://github.com/paulmillr/chokidar).\r\n\r\n\r\n### Misc.\r\n\r\n- [mfs](https://github.com/cadorn/mfs) - Monitor your fs-extra calls.\r\n\r\n\r\n\r\nHacking on fs-extra\r\n-------------------\r\n\r\nWanna hack on `fs-extra`? Great! Your help is needed! [fs-extra is one of the most depended upon Node.js packages](http://nodei.co/npm/fs-extra.png?downloads=true&downloadRank=true&stars=true). This project\r\nuses [JavaScript Standard Style](https://github.com/feross/standard) - if the name or style choices bother you,\r\nyou're gonna have to get over it :) If `standard` is good enough for `npm`, it's good enough for `fs-extra`.\r\n\r\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\r\n\r\nWhat's needed?\r\n- First, take a look at existing issues. Those are probably going to be where the priority lies.\r\n- More tests for edge cases. Specifically on different platforms. There can never be enough tests.\r\n- Improve test coverage. See coveralls output for more info.\r\n- After the directory walker is integrated, any function that needs to traverse directories like\r\n`copy`, `remove`, or `mkdirs` should be built on top of it.\r\n\r\nNote: If you make any big changes, **you should definitely file an issue for discussion first.**\r\n\r\n### Running the Test Suite\r\n\r\nfs-extra contains hundreds of tests.\r\n\r\n- `npm run lint`: runs the linter ([standard](http://standardjs.com/))\r\n- `npm run unit`: runs the unit tests\r\n- `npm test`: runs both the linter and the tests\r\n\r\n\r\n### Windows\r\n\r\nIf you run the tests on the Windows and receive a lot of symbolic link `EPERM` permission errors, it's\r\nbecause on Windows you need elevated privilege to create symbolic links. You can add this to your Windows's\r\naccount by following the instructions here: http://superuser.com/questions/104845/permission-to-make-symbolic-links-in-windows-7\r\nHowever, I didn't have much luck doing this.\r\n\r\nSince I develop on Mac OS X, I use VMWare Fusion for Windows testing. I create a shared folder that I map to a drive on Windows.\r\nI open the `Node.js command prompt` and run as `Administrator`. I then map the network drive running the following command:\r\n\r\n    net use z: \"\\\\vmware-host\\Shared Folders\"\r\n\r\nI can then navigate to my `fs-extra` directory and run the tests.\r\n\r\n\r\nNaming\r\n------\r\n\r\nI put a lot of thought into the naming of these functions. Inspired by @coolaj86's request. So he deserves much of the credit for raising the issue. See discussion(s) here:\r\n\r\n* https://github.com/jprichardson/node-fs-extra/issues/2\r\n* https://github.com/flatiron/utile/issues/11\r\n* https://github.com/ryanmcgrath/wrench-js/issues/29\r\n* https://github.com/substack/node-mkdirp/issues/17\r\n\r\nFirst, I believe that in as many cases as possible, the [Node.js naming schemes](http://nodejs.org/api/fs.html) should be chosen. However, there are problems with the Node.js own naming schemes.\r\n\r\nFor example, `fs.readFile()` and `fs.readdir()`: the **F** is capitalized in *File* and the **d** is not capitalized in *dir*. Perhaps a bit pedantic, but they should still be consistent. Also, Node.js has chosen a lot of POSIX naming schemes, which I believe is great. See: `fs.mkdir()`, `fs.rmdir()`, `fs.chown()`, etc.\r\n\r\nWe have a dilemma though. How do you consistently name methods that perform the following POSIX commands: `cp`, `cp -r`, `mkdir -p`, and `rm -rf`?\r\n\r\nMy perspective: when in doubt, err on the side of simplicity. A directory is just a hierarchical grouping of directories and files. Consider that for a moment. So when you want to copy it or remove it, in most cases you'll want to copy or remove all of its contents. When you want to create a directory, if the directory that it's suppose to be contained in does not exist, then in most cases you'll want to create that too.\r\n\r\nSo, if you want to remove a file or a directory regardless of whether it has contents, just call `fs.remove(path)`. If you want to copy a file or a directory whether it has contents, just call `fs.copy(source, destination)`. If you want to create a directory regardless of whether its parent directories exist, just call `fs.mkdirs(path)` or `fs.mkdirp(path)`.\r\n\r\n\r\nCredit\r\n------\r\n\r\n`fs-extra` wouldn't be possible without using the modules from the following authors:\r\n\r\n- [Isaac Shlueter](https://github.com/isaacs)\r\n- [Charlie McConnel](https://github.com/avianflu)\r\n- [James Halliday](https://github.com/substack)\r\n- [Andrew Kelley](https://github.com/andrewrk)\r\n\r\n\r\n\r\n\r\nLicense\r\n-------\r\n\r\nLicensed under MIT\r\n\r\nCopyright (c) 2011-2016 [JP Richardson](https://github.com/jprichardson)\r\n\r\n[1]: http://nodejs.org/docs/latest/api/fs.html\r\n\r\n\r\n[jsonfile]: https://github.com/jprichardson/node-jsonfile\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jprichardson/node-fs-extra.git"
  },
  "scripts": {
    "coverage": "istanbul cover test.js",
    "coveralls": "npm run coverage && coveralls < coverage/lcov.info",
    "lint": "standard",
    "test": "npm run lint && npm run unit",
    "test-find": "find ./lib/**/__tests__ -name *.test.js | xargs mocha",
    "unit": "node test.js"
  },
  "version": "0.30.0"
}
